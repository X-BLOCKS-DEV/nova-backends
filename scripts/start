#!/usr/bin/env bash
set -euo pipefail

# Start Nova

if [[ $UID != 0 ]]; then
    echo "Nova must be started as root"
    echo "Please re-run this script as"
    echo "  sudo ./scripts/start"
    exit 1
fi


check_dependencies () {
  for cmd in "$@"; do
    if ! command -v $cmd >/dev/null 2>&1; then
      echo "This script requires \"${cmd}\" to be installed"
      exit 1
    fi
  done
}

# Check system's dependencies
check_dependencies readlink dirname ip docker docker-compose

# Check karen's dependencies
check_dependencies fswatch

# Check OTA update scripts' dependencies
check_dependencies rsync jq curl

NOVA_ROOT="$(dirname $(readlink -f "${BASH_SOURCE[0]}"))/.."
NOVA_LOGS="${NOVA_ROOT}/logs"
USER_FILE="${NOVA_ROOT}/db/user.json"

if [[ ! -f ${NOVA_ROOT}/db/info.json ]]; then
    echo "Metadata file is not exists"
    echo "Please create this file first!"
    exit 1
fi

set_status="${NOVA_ROOT}/scripts/status-server/set-status"

$set_status umbrel started

if [[ ! -d "$NOVA_ROOT" ]]; then
  echo "Root dir does not exist '$NOVA_ROOT'"
  $set_status umbrel errored umbrel-root-missing
  exit 1
fi

# Configure Nova if it isn't already configured
if [[ ! -f "${NOVA_ROOT}/statuses/configured" ]]; then
  NGINX_PORT=${NGINX_PORT:-80} POSTGRES_PORT=${POSTGRES_PORT:-3000} "${NOVA_ROOT}/scripts/configure"
fi

NOVA_UPDATE_REBOOT_PERFORMED="${NOVA_ROOT}/statuses/umbrel-update-reboot-performed"
if [[ -f "${NOVA_UPDATE_REBOOT_PERFORMED}" ]]; then
  # Cleanup status file
  rm "${NOVA_UPDATE_REBOOT_PERFORMED}"

  # Mark update status as successful
  cat <<EOF > "${NOVA_ROOT}/statuses/update-status.json"
{"state": "success", "progress": 100, "description": "", "updateTo": ""}
EOF
fi

echo
echo "======================================"
echo "============= STARTING ==============="
echo "============== NOVA ================"
echo "======================================"
echo

echo "Setting environment variables..."
echo

# Increase default Docker and Compose timeouts to 240s
# as bitcoin can take a long while to respond
export DOCKER_CLIENT_TIMEOUT=240
export COMPOSE_HTTP_TIMEOUT=240

cd "$NOVA_ROOT"

echo "Clearing signals"
rm -f ${NOVA_ROOT}/events/signals/*

echo "Starting karen..."
echo
./karen &>> "${NOVA_LOGS}/karen.log" &

echo "Starting status monitors..."
pkill -f ./scripts/status-monitor || true
./scripts/status-monitor memory 1 &>> "${NOVA_LOGS}/status-monitor.log" &
./scripts/status-monitor storage 1 &>> "${NOVA_LOGS}/status-monitor.log" &
./scripts/status-monitor temperature 1 &>> "${NOVA_LOGS}/status-monitor.log" &
./scripts/status-monitor uptime 1 &>> "${NOVA_LOGS}/status-monitor.log" &

# Automatically update app repo every 5 minutes
# If the app repo has not yet been cloned (ie it's a fresh Nova install)
# Then this will do the intial pull/initialisation
# ./scripts/status-monitor repo 300 &>> "${NOVA_LOGS}/status-monitor.log" &

echo "Starting memory monitor..."
echo
./scripts/memory-monitor &>> "${NOVA_LOGS}/memory-monitor.log" &

# compose_files=()

# compose_files+=( "--file" "docker-compose.yml" )

# NOVA_DEV_FILE="${NOVA_ROOT}/.umbrel-dev"
# if [[ -f "${NOVA_DEV_FILE}" ]]; then
  # compose_files+=( "--file" "${NOVA_ROOT}/docker-compose.dev.yml" )
# fi

echo
echo "Starting Docker services..."
echo
docker-compose "${compose_files[@]}" up --detach --build --remove-orphans || {
  echo "Failed to start containers"
  $set_status umbrel errored docker-failed
  exit 1
}
echo

echo "Removing status server iptables entry..."
"${NOVA_ROOT}/scripts/status-server/setup-iptables" --delete

# If a backup of resolv.conf exists
# (that got created during the Nova update process)
# then we'll now restore this after Nova
# and the apps have started
# That way if e.g. a Docker image is still missing,
# we would use public DNS servers
RESOLV_CONF_FILE="/etc/resolv.conf"
RESOLV_CONF_BACKUP_FILE="/tmp/resolv.conf"
if [[ -f "${RESOLV_CONF_BACKUP_FILE}" ]]; then
  cat "${RESOLV_CONF_BACKUP_FILE}" > "${RESOLV_CONF_FILE}" || true

  rm --force "${RESOLV_CONF_BACKUP_FILE}" || true
fi

DEVICE_HOSTNAME="$(hostname).local"
DEVICE_IP="$(ip -o route get to 8.8.8.8 | sed -n 's/.*src \([0-9.]\+\).*/\1/p')"

echo "Nova is now accessible at"
echo "  http://${DEVICE_HOSTNAME}"
echo "  http://${DEVICE_IP}"

$set_status umbrel completed
