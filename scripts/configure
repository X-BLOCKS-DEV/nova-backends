#!/usr/bin/env bash
set -euo pipefail

##########################################################
################## Check dependencies ####################
##########################################################

check_dependencies () {
  for cmd in "$@"; do
    if ! command -v $cmd >/dev/null 2>&1; then
      echo "This script requires \"${cmd}\" to be installed"
      exit 1
    fi
  done
}

if [ ! "$(uname -s)" == "Linux" ]; then
  echo "Sorry, Nova only supports Linux-based systems at this point."
  exit 1
fi

check_dependencies docker docker-compose dirname readlink

# Switch to Nova's root directory
NOVA_ROOT="$(readlink -f "$(dirname "${BASH_SOURCE[0]}")"/..)"
if [[ ! -d "$NOVA_ROOT" ]]; then
  echo "Root dir does not exist '$NOVA_ROOT'"
  exit 1
fi
cd "$NOVA_ROOT"

# Make sure we use the status dir from the real Nova installation if this is
# an OTA update.
STATUS_DIR="${NOVA_ROOT}/statuses"
if [[ -f "${NOVA_ROOT}/../.umbrel" ]]; then
  STATUS_DIR="${NOVA_ROOT}/../statuses"
fi

echo
echo "======================================"
if [[ -f "${STATUS_DIR}/configured" ]]; then
  echo "=========== RECONFIGURING ============"
else
  echo "============ CONFIGURING ============="
fi
echo "=============== NOVA ==============="
echo "======================================"
echo


##########################################################
############### Setup configuration files ###############
##########################################################

# Store paths to intermediary config files
NGINX_CONF_FILE="./templates/nginx.conf"
NGINX_MIME_FILE="./templates/mime.types"
ENV_FILE="./templates/.env"

# Remove intermediary files if they exist from any
# previous unclean configuration run
[[ -f "$NGINX_CONF_FILE" ]] && rm -f "$NGINX_CONF_FILE"
[[ -f "$NGINX_MIME_FILE" ]] && rm -f "$NGINX_MIME_FILE"
[[ -f "$ENV_FILE" ]] && rm -f "$ENV_FILE"

# Copy template configs to intermediary configs
[[ -f "./templates/nginx-sample.conf" ]] && cp "./templates/nginx-sample.conf" "$NGINX_CONF_FILE"
[[ -f "./templates/mime-sample.types" ]] && cp "./templates/mime-sample.types" "$NGINX_MIME_FILE"
[[ -f "./templates/.env-sample" ]] && cp "./templates/.env-sample" "$ENV_FILE"


##########################################################
############ Generate configuration variables ############
##########################################################

# Load existing credentials if we have some
[[ -f "./.env" ]] && source "./.env"
[[ ! -z ${PREV_ENV_FILE+x} ]] && [[ -f "${PREV_ENV_FILE}" ]] && source "${PREV_ENV_FILE}"

# Define Nova Networking
NETWORK_IP="10.21.0.0"
GATEWAY_IP="10.21.0.1"
NGINX_IP="10.21.21.2"
NGINX_PORT="${NGINX_PORT:-80}"
POSTGRES_IP="10.21.22.1"
POSTGRES_PORT=${POSTGRES_PORT:-3000}
DASHBOARD_IP="10.21.21.3"
MANAGER_IP="10.21.21.4"
AUTH_IP="10.21.21.6"
AUTH_PORT="2000"

##########################################################
### Update config files with configuration variables #####
##########################################################

# Store docker binary path
DOCKER_BINARY=$(readlink -f "$(which docker)")
sed -i "s#DOCKER_BINARY=<path>#DOCKER_BINARY=$DOCKER_BINARY#g;" "$ENV_FILE"

# TODO: Update all the above code to use this simpler logic
for template in "${NGINX_CONF_FILE}" "${ENV_FILE}"; do
  # Nova
  sed -i "s/<network-ip>/${NETWORK_IP}/g" "${template}"
  sed -i "s/<gateway-ip>/${GATEWAY_IP}/g" "${template}"
  sed -i "s/<nginx-ip>/${NGINX_IP}/g" "${template}"
  sed -i "s/<nginx-port>/${NGINX_PORT}/g" "${template}"
  sed -i "s/<postgres-ip>/${POSTGRES_IP}/g" "${template}"
  sed -i "s/<postgres-port>/${POSTGRES_PORT}/g" "${template}"
  sed -i "s/<dashboard-ip>/${DASHBOARD_IP}/g" "${template}"
  sed -i "s/<manager-ip>/${MANAGER_IP}/g" "${template}"
done

##########################################################
############## Override main config files ################
##########################################################

mv -f "$NGINX_CONF_FILE" "./nginx/nginx.conf"
mv -f "$NGINX_MIME_FILE" "./nginx/mime.types"
mv -f "$ENV_FILE" "./.env"

##########################################################
################ Configuration complete ##################
##########################################################

echo "Configuring permissions..."
echo

# Create configured status
touch "${STATUS_DIR}/configured"

echo "Configuration successful"
echo "You can now start Nova by running:"
echo "  sudo ./scripts/start"
echo